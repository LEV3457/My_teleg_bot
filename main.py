import asyncio
import os
from loguru import logger
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from dotenv import find_dotenv, load_dotenv
# from aiogram.enums import ChatType
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext



router = Router()


load_dotenv(find_dotenv())
TOKEN = os.getenv("TOKEN")


async def main():
    logger.add("file.log",
            format="{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}",
            rotation="3 days",
            backtrace=True,
            diagnose=True)

    bot = Bot(TOKEN)
    logger.info("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
    dp = Dispatcher()
    logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω")

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –Ø —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫ –Ω–∞ —á–∞—Å!")
        await message.answer("—á—Ç–æ –Ω—É–∂–Ω–æ: /start –∏ /help")
        logger.info("–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start")


    @dp.message(Command("help"))
    async def help(message: types.Message):
        await message.answer("–¥–µ—Ä–∂–∏ –ø–æ–¥–∞—Ä–æ—á–µ–∫")
        logger.info("–ë–æ—Ç –æ–±—å—è—Å–Ω–∏–ª, —á—Ç–æ –¥–µ–ª–∞–µ—Ç")

    # @dp.message()
    # async def echo(message: types.Message):
    #     await message.answer(message.text)
    #     logger.info(f"–ë–æ—Ç –≤–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text}")

    await dp.start_polling(bot)


#     @router.message(
#         F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
#         F.text.lower().contains('–¥–∞—Ç—å')
#         )
#     async def cry(message: types.Message):
#         sender = message.from_user
#         sender_username = f"@{sender.username}" if sender.username else sender.first_name
#         await message.reply(f"{sender_username} –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç")


#     @router.message(
#         F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
#         F.text.lower().contains("–ª—é–±–ª—é")
#     )
#     async def interactive_love(message: types.Message):
#         await message.reply("–ê —è –≤–∞—Å –Ω–µ—Ç")


#     @router.message(
#         F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
#         F.text.lower().contains('–¥–∞—Ç—å')
# )
#     async def cry(message: types.Message):
#         sender = message.from_user
#         sender_username = f"@{sender.username}" if sender.username else sender.first_name
#         await message.reply(f"{sender_username} –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç")
    
    
#     @router.message(
#         F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
#         F.text.lower().contains("—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è")
#     )
#     async def interactive_love(message: types.Message):
#         await message.reply(" —Ç—ã —Ä–∞–¥—É–µ—à—å—Å—è")

KEYWORD_RESPONSES = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä",
    "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?",
    "–ø–æ–∫–∞": "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã",
    "–±–æ—Ç": "–Ø –∑–¥–µ—Å—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
}


def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É.")


def handle_message(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text.lower()  
    for keyword, response in KEYWORD_RESPONSES.items():
        if keyword in user_message:
            update.message.reply_text(response)
            return

    update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")


def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.idle()

if __name__ == '__main__':
    asyncio.run(main())
